name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint-and-test:
    name: Lint, Test & Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.9.0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Type check
        run: pnpm tsc --noEmit

      - name: Build project
        run: pnpm build

      - name: Run unit tests
        run: pnpm test --coverage --watchAll=false

      - name: Upload coverage reports
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Archive build artifacts
        if: matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            pnpm-lock.yaml

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.9.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run dependency vulnerability check
        run: pnpm audit --fix

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: url-shortener:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Start the container
          docker run -d --name url-shortener-test \
            -p 3000:3000 -p 3001:3001 \
            -e NODE_ENV=production \
            url-shortener:${{ github.sha }}

          # Wait for the service to start and check logs
          sleep 5
          echo "Container logs:"
          docker logs url-shortener-test

          # Wait a bit more for full startup
          sleep 10

          # Check if container is still running
          if ! docker ps | grep -q url-shortener-test; then
            echo "Container is not running. Final logs:"
            docker logs url-shortener-test
            exit 1
          fi

          # Health check with retry
          for i in {1..6}; do
            if curl -f http://localhost:3000/documentation; then
              echo "Health check passed"
              break
            else
              echo "Health check attempt $i failed, retrying in 5 seconds..."
              if [ $i -eq 6 ]; then
                echo "Health check failed after 6 attempts"
                docker logs url-shortener-test
                exit 1
              fi
              sleep 5
            fi
          done

          # Stop and remove container
          docker stop url-shortener-test
          docker rm url-shortener-test

      - name: Login to Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-audit, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "This would deploy to your staging server"
          # Add your staging deployment commands here
          # Example: ssh to staging server, pull latest image, restart service

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-audit, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "This would deploy to your production server"
          # Add your production deployment commands here
          # Example: ssh to production server, pull latest image, restart service

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Production deployment successful"
          elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "‚úÖ Staging deployment successful"
          else
            echo "‚ùå Deployment failed or skipped"
          fi
